// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redish.proto

package redish

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30173c04f457c8e, []int{0}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SingleValue struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleValue) Reset()         { *m = SingleValue{} }
func (m *SingleValue) String() string { return proto.CompactTextString(m) }
func (*SingleValue) ProtoMessage()    {}
func (*SingleValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30173c04f457c8e, []int{1}
}

func (m *SingleValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleValue.Unmarshal(m, b)
}
func (m *SingleValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleValue.Marshal(b, m, deterministic)
}
func (m *SingleValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleValue.Merge(m, src)
}
func (m *SingleValue) XXX_Size() int {
	return xxx_messageInfo_SingleValue.Size(m)
}
func (m *SingleValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleValue.DiscardUnknown(m)
}

var xxx_messageInfo_SingleValue proto.InternalMessageInfo

func (m *SingleValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}
func (*SetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30173c04f457c8e, []int{2}
}

func (m *SetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRequest.Unmarshal(m, b)
}
func (m *SetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRequest.Marshal(b, m, deterministic)
}
func (m *SetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRequest.Merge(m, src)
}
func (m *SetRequest) XXX_Size() int {
	return xxx_messageInfo_SetRequest.Size(m)
}
func (m *SetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRequest proto.InternalMessageInfo

func (m *SetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type OK struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OK) Reset()         { *m = OK{} }
func (m *OK) String() string { return proto.CompactTextString(m) }
func (*OK) ProtoMessage()    {}
func (*OK) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30173c04f457c8e, []int{3}
}

func (m *OK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OK.Unmarshal(m, b)
}
func (m *OK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OK.Marshal(b, m, deterministic)
}
func (m *OK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OK.Merge(m, src)
}
func (m *OK) XXX_Size() int {
	return xxx_messageInfo_OK.Size(m)
}
func (m *OK) XXX_DiscardUnknown() {
	xxx_messageInfo_OK.DiscardUnknown(m)
}

var xxx_messageInfo_OK proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Key)(nil), "redish.Key")
	proto.RegisterType((*SingleValue)(nil), "redish.SingleValue")
	proto.RegisterType((*SetRequest)(nil), "redish.SetRequest")
	proto.RegisterType((*OK)(nil), "redish.OK")
}

func init() { proto.RegisterFile("redish.proto", fileDescriptor_d30173c04f457c8e) }

var fileDescriptor_d30173c04f457c8e = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0x4d, 0xc9,
	0x2c, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xc4, 0xb9, 0x98,
	0xbd, 0x53, 0x2b, 0x85, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x40, 0x4c, 0x25, 0x65, 0x2e, 0xee, 0xe0, 0xcc, 0xbc, 0xf4, 0x9c, 0xd4, 0xb0, 0xc4, 0x9c,
	0xd2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0x32, 0x10, 0x03, 0xaa, 0x04, 0xc2, 0x51, 0x32, 0xe1, 0xe2,
	0x0a, 0x4e, 0x2d, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xc1, 0x34, 0x04, 0xa1, 0x8b, 0x09,
	0x59, 0x17, 0x0b, 0x17, 0x93, 0xbf, 0xb7, 0xd1, 0x44, 0x46, 0x2e, 0xb6, 0x20, 0xb0, 0x23, 0x84,
	0x34, 0xb9, 0x98, 0xd3, 0x53, 0x4b, 0x84, 0xb8, 0xf5, 0xa0, 0x4e, 0xf4, 0x4e, 0xad, 0x94, 0x12,
	0x86, 0x71, 0x90, 0x5c, 0xa1, 0xc4, 0x20, 0xa4, 0xce, 0xc5, 0x5c, 0x9c, 0x5a, 0x22, 0x24, 0x04,
	0x97, 0x85, 0x5b, 0x2f, 0xc5, 0x05, 0x13, 0xf3, 0xf7, 0x56, 0x62, 0x10, 0x32, 0xe6, 0x62, 0x4b,
	0x4f, 0x2d, 0xc1, 0xa5, 0x16, 0xbb, 0xe9, 0x49, 0x6c, 0xe0, 0xc0, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x2e, 0x6d, 0xe1, 0x36, 0x2c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RedishClient is the client API for Redish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedishClient interface {
	// https://redis.io/commands
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*SingleValue, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*OK, error)
	Getset(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SingleValue, error)
}

type redishClient struct {
	cc *grpc.ClientConn
}

func NewRedishClient(cc *grpc.ClientConn) RedishClient {
	return &redishClient{cc}
}

func (c *redishClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*SingleValue, error) {
	out := new(SingleValue)
	err := c.cc.Invoke(ctx, "/redish.Redish/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redishClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/redish.Redish/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redishClient) Getset(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SingleValue, error) {
	out := new(SingleValue)
	err := c.cc.Invoke(ctx, "/redish.Redish/getset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedishServer is the server API for Redish service.
type RedishServer interface {
	// https://redis.io/commands
	Get(context.Context, *Key) (*SingleValue, error)
	Set(context.Context, *SetRequest) (*OK, error)
	Getset(context.Context, *SetRequest) (*SingleValue, error)
}

// UnimplementedRedishServer can be embedded to have forward compatible implementations.
type UnimplementedRedishServer struct {
}

func (*UnimplementedRedishServer) Get(ctx context.Context, req *Key) (*SingleValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRedishServer) Set(ctx context.Context, req *SetRequest) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedRedishServer) Getset(ctx context.Context, req *SetRequest) (*SingleValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getset not implemented")
}

func RegisterRedishServer(s *grpc.Server, srv RedishServer) {
	s.RegisterService(&_Redish_serviceDesc, srv)
}

func _Redish_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedishServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redish.Redish/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedishServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redish_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedishServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redish.Redish/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedishServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redish_Getset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedishServer).Getset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redish.Redish/Getset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedishServer).Getset(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Redish_serviceDesc = grpc.ServiceDesc{
	ServiceName: "redish.Redish",
	HandlerType: (*RedishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _Redish_Get_Handler,
		},
		{
			MethodName: "set",
			Handler:    _Redish_Set_Handler,
		},
		{
			MethodName: "getset",
			Handler:    _Redish_Getset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redish.proto",
}
