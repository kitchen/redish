# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import redish_pb2 as redish__pb2


class RedishStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get = channel.unary_unary(
        '/redish.Redish/get',
        request_serializer=redish__pb2.Key.SerializeToString,
        response_deserializer=redish__pb2.SingleValue.FromString,
        )
    self.set = channel.unary_unary(
        '/redish.Redish/set',
        request_serializer=redish__pb2.SetRequest.SerializeToString,
        response_deserializer=redish__pb2.OK.FromString,
        )


class RedishServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get(self, request, context):
    """https://redis.io/commands
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RedishServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get': grpc.unary_unary_rpc_method_handler(
          servicer.get,
          request_deserializer=redish__pb2.Key.FromString,
          response_serializer=redish__pb2.SingleValue.SerializeToString,
      ),
      'set': grpc.unary_unary_rpc_method_handler(
          servicer.set,
          request_deserializer=redish__pb2.SetRequest.FromString,
          response_serializer=redish__pb2.OK.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'redish.Redish', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
